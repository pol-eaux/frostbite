using UnityEngine;
using UnityEngine.InputSystem;

/// <summary>
/// Class <c>PlayerManager</c>
/// This class in responsible for getting inputs from the input system and delegating 
/// necessary information to other player scripts.
/// </summary>
public class PlayerManager : MonoBehaviour
{
    [Header("Components")]
    [SerializeField] private InputActionAsset inputActions;
    [SerializeField] private PlayerMovement playerMovement;
    [SerializeField] private PlayerLook playerLook;
    [SerializeField] private PlayerJump playerJump;
    [SerializeField] private PlayerCrouch playerCrouch;

    [Header("Transforms")]
    [SerializeField] private Transform characterModel;
    [SerializeField] private Transform cameraAnchor;

    private CharacterController _characterController;

    // Input Actions.
    private InputAction _moveAction;
    private InputAction _lookAction;
    private InputAction _jumpAction;
    private InputAction _crouchAction;
    private InputAction _sprintAction;

    // Inputs from the input system.
    private Vector2 _moveInput;
    private Vector2 _lookInput;

    // Jump input.
    private bool _jumpPressed;
    // Crouch input.
    private bool _crouchPressed;
    // Sprint input.
    private bool _sprintPressed;
    // Is the player grounded this frame?
    private bool _isGrounded;

    // For acceleration.
    private Vector3 currentVelocity = Vector3.zero;

    private void OnEnable()
    {
        inputActions.FindActionMap("Gameplay").Enable();
    }

    private void Awake()
    {
        // Get inputs.
        var gameplayMap = inputActions.FindActionMap("Gameplay");
        _moveAction = gameplayMap.FindAction("Move");
        _lookAction = gameplayMap.FindAction("Look");
        _jumpAction = gameplayMap.FindAction("Jump");
        _crouchAction = gameplayMap.FindAction("Crouch");
        _sprintAction = gameplayMap.FindAction("Sprint");

        // Get character controller.
        _characterController = GetComponent<CharacterController>();

        // Initialize bools.
        _isGrounded = _characterController.isGrounded;
        _jumpPressed = false;
        _crouchPressed = false;
        _sprintPressed = false;
    }

    private void Start()
    {
        // Lock and hide the cursor.
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    private void Update()
    {
        float deltaTime = Time.deltaTime;
        
        // Update all needed variables for this frame.
        UpdateVariables();

        // Call player component scripts.
        Move(deltaTime);
        Look(deltaTime);
        Crouch(deltaTime);
    }

    private void OnDisable()
    {
        inputActions.FindActionMap("Gameplay").Disable();
    }

    /// <summary>
    /// Gets updated values for global variables needed in player component calculations.
    /// </summary>
    private void UpdateVariables()
    {
        // Is the player grounded on this frame?
        _isGrounded = _characterController.isGrounded;
        // Was jump pressed this frame?
        _jumpPressed = _jumpAction.WasPressedThisFrame();
        // Was crouch held this frame?
        _crouchPressed = _crouchAction.IsPressed();
        // Was sprint held this frame?
        _sprintPressed = _sprintAction.IsPressed();

        // Read inputs:
        _moveInput = _moveAction.ReadValue<Vector2>();
        _lookInput = _lookAction.ReadValue<Vector2>();
    }

    /// <summary>
    /// Moves the character controller by a Vector3 generated by the UpdateMove function in the PlayerMovement component.
    /// Calculates jumping and gravity by getting a float generated by the UpdateJump function in the PlayerJump component.
    /// </summary>
    /// <param name="deltaTime"> Global delta time </param>
    private void Move(float deltaTime)
    {
        // Get vertical movement (apply gravity and or jump).
        float verticalVelocity = playerJump.UpdateGravity(deltaTime, _jumpPressed, _isGrounded, _crouchPressed);
        // Get horizontal movement.
        Vector3 horizontalMovement = playerMovement.UpdateMove(deltaTime, _moveInput, ref currentVelocity, _crouchPressed, _sprintPressed);
        // Combine them for the final movement vector.
        Vector3 finalMovement = new Vector3(horizontalMovement.x, verticalVelocity * deltaTime, horizontalMovement.z);

        // Move the character controller.
        _characterController.Move(finalMovement);
    }

    /// <summary>
    /// Rotates the camera along the x-axis using the UpdateLook function in the PlayerLook component.
    /// Rotates this object along the y-axis using a value updated by running the UpdateLook function.
    /// </summary>
    /// <param name="deltaTime"> Global delta time </param>
    private void Look(float deltaTime)
    {
        // Rotate the player camera along the x-axis by calling the update function in the player look script.
        playerLook.UpdateLook(deltaTime, _lookInput);
        // Rotate the player object along the y-axis by getting the y-rotation calculated in the update look funciton.
        transform.localRotation = Quaternion.Euler(0f, playerLook.GetYRotation(), 0f);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="deltaTime"> Global delta time </param>
    private void Crouch(float deltaTime)
    {

    }
}
